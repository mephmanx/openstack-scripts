#version=RHEL8
ignoredisk --only-use=vda
# Partition clearing information
clearpart --all --initlabel
# Use graphical install
text
# Use CDROM installation media
cdrom
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Root password
rootpw {GENERATED_PWD}
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd" --disabled="libvirtd"

# System bootloader configuration
bootloader --location=mbr --boot-drive=vda
timezone UTC --isUtc

%pre --log=/tmp/network.log
NET_THREE=""
if [[ "{HAS_NET_3}" == "1" ]]; then
NET_THREE="network  --device=enp3s0 --bootproto=static --onboot=yes --noipv6 --activate"
fi

cat << EOF >> /tmp/nicinfo
network  --device=enp1s0 --bootproto=dhcp --noipv6 --onboot=yes --activate --nodefroute
network  --device=enp2s0 --bootproto=static --onboot=yes --noipv6 --activate --ip={NODE_IP} --gateway={GATEWAY_ROUTER_IP} --netmask={NETMASK} --nameserver={IDENTITY_VIP}
$NET_THREE
EOF
%end

%include /tmp/nicinfo







%pre --log=/tmp/ks_pre.log
USB=`ls -l /dev/disk/by-id/ | grep usb | grep -v part | awk '{ print $NF }' | sed -r 's/..\/..\///g'`
if [ -z "$USB" ]; then
  USB=" "
fi
# Determine how many drives we have
set $(list-harddrives | sed "/^$USB/d")
let numd=$#/2

if [ "$numd" -eq 1 ] ; then
  ## all but storage have only 1 drive
cat << EOF >> /tmp/partinfo
autopart --type=lvm
EOF

else
cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=vda
part / --size=1024 --grow --ondisk=vda
part /home --size=1000 --ondisk=vda
part /boot --size=1000 --ondisk=vda
part swap --size=20000 --ondisk=vda
part cinder-volumes --size=1024 --grow --ondisk=vdb
volgroup cinder-volumes cinder-volumes

part /dev/vdc --fstype="xfs" --size=1024 --ondisk=vdc --label=KOLLA_SWIFT_DATA --grow
part /dev/vdd --fstype="xfs" --size=1024 --ondisk=vdc --label=KOLLA_SWIFT_DATA --grow
part /dev/vde --fstype="xfs" --size=1024 --ondisk=vdc --label=KOLLA_SWIFT_DATA --grow
EOF

fi
%end

zerombr
%include /tmp/partinfo

# Create user
user --name=stack --shell=/bin/bash --homedir=/opt/stack --password={GENERATED_PWD}

%packages
%include /mnt/install/repo/ks_configs/packages.cfg
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot
cp /mnt/install/repo/embedded/* /mnt/sysroot/tmp
%include /mnt/install/repo/ks_configs/create-local-repo.cfg
%include /mnt/install/repo/ks_configs/copy_py_modules_to_root_fs.cfg
cp -r /run/install/repo/ks_configs/python.modules /mnt/sysimage/root/
%include /mnt/install/repo/ks_configs/configure-local-repo.cfg
%end

%post
exec 1>/root/init-install.log 2>&1

source /tmp/project_config.sh
source /tmp/vm_functions.sh

install_packages_openstack

setup_keys_certs_for_vm
# adjust main volumes to allocate most size to root volume
grow_fs

grub_update

cleanUpNetwork

systemctl stop firewalld
systemctl disable firewalld
systemctl mask firewalld

systemctl enable qemu-guest-agent

tuned-adm profile virtual-guest

echo "stack ALL=(ALL) NOPASSWD: ALL" | tee /etc/sudoers.d/stack

cat >> /etc/modules-load.d/vhost_net.conf <<EOF
vhost_net
EOF

join_machine_to_domain {CENTOS_ADMIN_PWD_123456789012}

#setup repo server
sed -i 's/Listen 80/Listen 8081/' /etc/httpd/conf/httpd.conf
systemctl enable httpd

## extract docker repo
tar -xf /tmp/docker-repo.tar -C /var/www/html

pip3 uninstall -y selinux
###############################

###Close out cfg file
%end
eula --agreed
reboot --eject
#########
