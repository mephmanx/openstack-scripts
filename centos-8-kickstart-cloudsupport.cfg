#version=RHEL8
ignoredisk --only-use=vda
# Partition clearing information
clearpart --none --initlabel
# Use graphical install
text
# Use CDROM installation media
cdrom
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information !!! Docker does NOT work with IPv6, DO NOT ENABLE !!!!!
network  --bootproto=static --device=enp1s0 --onboot=yes --activate --noipv6 --ip={SUPPORT_VIP} --gateway={GATEWAY_ROUTER_IP} --netmask={NETMASK} --nameserver={GATEWAY_ROUTER_IP} --hostname={HOST}
# Root password
rootpw {GENERATED_PWD}
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System timezone
timezone {TIMEZONE} --isUtc --ntpservers={NTP_SERVER}
#### admin account
group --name=openstack
user --name=admin --password={CENTOS_ADMIN_PWD} --plaintext --groups=openstack
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=vda
autopart --type=lvm
# Partition clearing information
clearpart --all --initlabel
zerombr

%packages
@core
-biosdevname
@^server-product-environment
kexec-tools
net-tools
curl
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot
cp /mnt/install/repo/embedded/* /mnt/sysroot/tmp
%end

%post
exec 1>/root/init-install.log 2>&1

mkdir -p /etc/cockpit/ws-certs.d/
cp /tmp/wildcard.crt /etc/cockpit/ws-certs.d/certificate.cert
cp /tmp/wildcard.key /etc/cockpit/ws-certs.d/certificate.key
cp /tmp/id_rsa.crt /etc/pki/ca-trust/source/anchors
runuser -l root -c  'update-ca-trust extract'

source /tmp/project_config.sh

echo {CENTOS_ADMIN_PWD} > /root/env_admin_pwd

dir_name=`find /dev/mapper -maxdepth 1 -type l -name '*cl*' -print -quit`
DRIVE_NAME=`grep -oP '(?<=_).*?(?=-)' <<< "$dir_name"`

runuser -l root -c  'rm -rf /etc/default/grub'
runuser -l root -c  'touch /etc/default/grub'
runuser -l root -c  'chmod +x /etc/default/grub'

cat > /tmp/grub <<EOF
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto resume=/dev/mapper/cl_$DRIVE_NAME-swap rd.lvm.lv=cl_$DRIVE_NAME/root rd.lvm.lv=cl_$DRIVE_NAME/swap net.ifnames=0 intel_iommu=on"
GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true
EOF

runuser -l root -c  'cat /tmp/grub > /etc/default/grub'
runuser -l root -c  'grub2-mkconfig  -o /boot/grub2/grub.cfg'

rm -rf /tmp/grub

ct=0

for FILE in /etc/sysconfig/network-scripts/*;
do
    echo "$FILE"
    IP=(`awk -F'=' '$1 == "IPADDR" {print $2}' $FILE`)
    GATEWAY=(`awk -F'=' '$1 == "GATEWAY" {print $2}' $FILE`)
    DNS1=(`awk -F'=' '$1 == "DNS1" {print $2}' $FILE`)
    NETMASK=(`awk -F'=' '$1 == "NETMASK" {print $2}' $FILE`)
    runuser -l root -c  "touch /etc/sysconfig/network-scripts/ifcfg-eth$ct"

    if [[ ! -z "$IP" ]]; then
#static ip addr
cat > /tmp/eth$ct <<EOF
# Generated by parse-kickstart
TYPE="Ethernet"
NAME="eth$ct"
DEVICE="eth$ct"
UUID="5844195f-b0d7-4d15-9442-87d1340cca2$ct"
ONBOOT="yes"
IPADDR=$IP
BOOTPROTO="static"
GATEWAY=$GATEWAY
DNS1=$DNS1
NETMASK=$NETMASK
EOF
else
#dynamic ip addr (use DHCP)
cat > /tmp/eth$ct <<EOF
# Generated by parse-kickstart
TYPE="Ethernet"
NAME="eth$ct"
DEVICE="eth$ct"
UUID="5844195f-b0d7-4d15-9442-87d1340cca2$ct"
ONBOOT="yes"
BOOTPROTO="dhcp"
EOF

    fi

    runuser -l root -c  "cat /tmp/eth$ct > /etc/sysconfig/network-scripts/ifcfg-eth$ct"
    runuser -l root -c  "rm -rf $FILE"
    ((ct++))
done

systemctl disable firewalld

#Disable root login in ssh and disable password login
if [[ $HYPERVISOR_DEBUG == 0 ]]; then
  sed -i 's/\(PermitRootLogin\).*/\1 no/' /etc/ssh/sshd_config
  sed -i 's/\(PasswordAuthentication\).*/\1 no/' /etc/ssh/sshd_config
fi

#Prep initial startup script
cp /tmp/init-cloudsupport.sh /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
###############################

### leave blank line at the bottom ####
