#version=RHEL8

# Partition clearing information
clearpart --none --initlabel
# Use graphical install
text
# Use CDROM installation media
cdrom
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
network --bootproto=dhcp --onboot=yes --noipv6 --activate --hostname=centos
# Root password
rootpw none
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System timezone
timezone {TIMEZONE} --isUtc
#### admin account
group --name=openstack
user --name=admin --password={CENTOS_ADMIN_PWD} --plaintext --groups=openstack
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
# autopart --type=lvm
# Partition clearing information

%pre --log=/tmp/ks_pre.log
# Determine how many drives we have
set $(list-harddrives)
let numd=$#/2
d1=$1
d1_size=$(printf "%.0f\n" "$2")
d2=$3
d2_size=$(printf "%.0f\n" "$4")

if [ $numd -ge 2 ] ; then
speed_d1=$(hdparm -tv /dev/$d1 | awk '/Timing buffered disk reads/ {print $11}')
speed_d2=$(hdparm -tv /dev/$d2 | awk '/Timing buffered disk reads/ {print $11}')
if [ $speed_d1 -gt $speed_d2]; then
hsd=$d1
hsd_drive_size_gb=$d1_size
rsd=$d2
else
hsd=$d2
hsd_drive_size_gb=$d2_size
rsd=$d1
fi

storage_size=$((hsd_drive_size_gb * 40/100))

## min drive size for 2 drive system is 800GB for regular speed drive (rsd).  high speed drive has no minimum.
## single drive is 1TB
## also test for min ram of 200GB.

cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$rsd
part / --size=50000 --ondisk=$rsd
part /home --size=1000 --ondisk=$rsd
part /boot --size=1000 --ondisk=$rsd
part swap --size=20000 --ondisk=$rsd
part /VM-VOL-KOLLA --size=60000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-CONTROL --size=140000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-NETWORK --size=120000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MONITORING --size=200000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MISC --size=230000 --fstype=ext4 --ondisk=$rsd

part /VM-VOL-SWIFT --size=$storage_size --fstype=ext4 --ondisk=$hsd

part /VM-VOL-CINDER --size=1024 --grow --fstype=ext4 --ondisk=$rsd
part /VM-VOL-COMPUTE --size=1024 --grow --fstype=ext4 --ondisk=$hsd
EOF

else

avail_space=$((d1_size - 51200 - 1024 - 1024 - 20480 - 1))
cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$d1
part / --size=50000 --ondisk=$d1
part /home --size=1000 --ondisk=$d1
part /boot --size=1000 --ondisk=$d1
part swap --size=20000 --ondisk=$d1
part /VM-VOL-ALL --size=$avail_space --fstype=ext4 --ondisk=$d1
EOF

fi
%end

clearpart --all --initlabel
zerombr
%include /tmp/partinfo

%packages
@core
-biosdevname
@^server-product-environment
kexec-tools
net-tools
curl
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot
cp /mnt/install/repo/embedded/* /mnt/sysroot/tmp
%end

%post
exec 1>/root/init-install.log 2>&1

unzip /tmp/repo.zip -d /tmp/openstack-scripts

chmod 700 /tmp/project_config.sh
source /tmp/project_config.sh

##### check that system meets minimum requirements
export INSTALLED_RAM=`dmidecode -t memory | grep  Size: | grep -v "No Module Installed" | awk '{sum+=$2}END{print sum}'`
export RESERVED_RAM=$(( $INSTALLED_RAM*$RAM_PCT_AVAIL_CLOUD/100 ))

TOTAL_CONTROL_RAM=$((CONTROL_COUNT * CONTROL_RAM))
TOTAL_NETWORK_RAM=$((NETWORK_COUNT * NETWORK_RAM))
TOTAL_MONITORING_RAM=$((MONITORING_COUNT * MONITORING_RAM))
TOTAL_STORAGE_RAM=$((STORAGE_COUNT * STORAGE_RAM))

MIN_REQUIRED_RAM=$(($PFSENSE_RAM + $CLOUDSUPPORT_RAM + $IDENTITY_RAM + $TOTAL_CONTROL_RAM + $TOTAL_NETWORK_RAM + $TOTAL_MONITORING_RAM + $TOTAL_STORAGE_RAM + $KOLLA_RAM))


if [[ $MIN_REQUIRED_RAM -gt $RESERVED_RAM ]]; then
  MIN_PHYSICAL_RAM=$(($MIN_REQUIRED_RAM / $RAM_PCT_AVAIL_CLOUD/100))
  echo "Not enough memory installed!  Minimum required ram is $MIN_PHYSICAL_RAM"
  if [[ $HYPERVISOR_DEBUG == 0 ]]; then
    exit -1
  fi
fi

echo "Installed RAM=$INSTALLED_RAM"
echo "Reserved RAM=$RESERVED_RAM"
#############


#### Use autogen password
HOWLONG=15 ## the number of characters
NEWPW=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c100 | head -c$((20+($RANDOM%20))) | tail -c$((20+($RANDOM%20))) | head -c${HOWLONG});

if [[ $HYPERVISOR_DEBUG == 1 ]]; then
    echo $NEWPW > /home/admin/rootpw
fi

#echo "${NEWPW}" |  passwd --stdin  root
#################

echo {CENTOS_ADMIN_PWD} > /root/env_admin_pwd

export DRIVE_NAME=openstack

runuser -l root -c  'rm -rf /etc/default/grub'
runuser -l root -c  'touch /etc/default/grub'
runuser -l root -c  'chmod 700 /etc/default/grub'

cat > /tmp/grub <<EOF
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto resume=/dev/mapper/cl_$DRIVE_NAME-swap rd.lvm.lv=cl_$DRIVE_NAME/root rd.lvm.lv=cl_$DRIVE_NAME/swap net.ifnames=0 intel_iommu=on bnx2.max_vfs=7 default_hugepagesz=1G hugepagesz=1G hugepages=$RESERVED_RAM"
GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true
EOF

runuser -l root -c  'cat /tmp/grub > /etc/default/grub'
runuser -l root -c  'grub2-mkconfig  -o /boot/grub2/grub.cfg'

rm -rf /tmp/grub

systemctl disable firewalld

## do not perform anything that would need internet access after the below command is executed.
##  the network is being reconfigured, the call will fail, and it might kill all future scripts
##### create bond ext-con
nmcli connection add type team con-name ext-con ifname ext-con config '{"runner":{"name":"lacp","active":true,"fast_rate":true,"tx_hash":["eth","ipv4"]}, "link_watch": {"name": "ethtool"}}'
nmcli connection modify ext-con autoconnect yes ipv4.method auto ipv6.method auto

ct=0
for DEVICE in `nmcli device | awk '$1 != "DEVICE" && $3 == "connected" && $2 == "ethernet" { print $1 }'`; do
echo "$DEVICE"
nmcli connection delete $DEVICE
nmcli con add type team-slave con-name ext-con-slave$ct ifname $DEVICE master ext-con
((ct++))
done

nmcli connection down ext-con && nmcli connection up ext-con
#########################

#Prep initial startup script
cp /tmp/openstack-scripts/init-openstack.sh /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
###############################

### leave blank line at the bottom ####

