#version=RHEL8

# Partition clearing information
clearpart --none --initlabel
# Use graphical install
text
# Use HD installation media
#cdrom
harddrive --partition=/dev/disk/by-label/CentOS-8-x86_64 --dir=/
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Root password
rootpw none
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System bootloader configuration
bootloader --location=mbr
# autopart --type=lvm
# Partition clearing information
timezone UTC --isUtc

%pre --log=/tmp/network.log
ip --brief address show | awk -F' ' '{ print $1 }' > /tmp/hw.out
nic_cards=`cat /tmp/hw.out`
nics=()
IFS=$'\n'; for i in $nic_cards; do
if [[ "lo" != "$i" ]]; then
STATUS=$(ethtool $i | grep 'Link detected' | awk -F: '{print $2}')

if [[ $STATUS =~ "yes" ]]; then
cat << EOF >> /tmp/nicinfo
network --device=$i --noipv6 --nodns --bootproto=dhcp --onboot=yes --activate
EOF

nics+=$i
fi
fi
done

data_string="${nics[*]}"
cat << EOF >> /tmp/nicinfo
network --device=ext-con --name=ext-con --noipv6 --bootproto=dhcp --onboot=yes --netmask=255.255.255.0 --bondslaves="${data_string//${IFS:0:1}/,}" --bondopts="mode=802.3ad,miimon=100,lacp_rate=fast,xmit_hash_policy=layer2+3" --hostname=platform-hypervisor-{HOSTNAME_SUFFIX}
EOF
%end

%include /tmp/nicinfo

%pre --log=/tmp/ks_pre.log
USB=`ls -l /dev/disk/by-id/ | grep usb | grep -v part | awk '{ print $NF }' | sed -r 's/..\/..\///g'`
if [ -z "$USB" ]; then
  USB=" "
fi
# Determine how many drives we have
set $(list-harddrives | sed "/^$USB/d")
let numd=$#/2
d1=$1
d1_size=$(printf "%.0f\n" "$2")
d2=$3
d2_size=$(printf "%.0f\n" "$4")

if [ $numd -ge 2 ] ; then
speed_d1=$(hdparm -tv /dev/$d1 | awk '/Timing buffered disk reads/ {print $11}')
speed_d2=$(hdparm -tv /dev/$d2 | awk '/Timing buffered disk reads/ {print $11}')
if [ $speed_d1 -gt $speed_d2]; then
hsd=$d1
hsd_drive_size_gb=$d1_size
rsd=$d2
else
hsd=$d2
hsd_drive_size_gb=$d2_size
rsd=$d1
fi

storage_size=$((hsd_drive_size_gb * 40/100))

## min drive size for 2 drive system is 800GB for regular speed drive (rsd).  high speed drive has no minimum.
## single drive is 1TB
## also test for min ram of 200GB.

cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$rsd
part / --size=100000 --ondisk=$rsd
part /home --size=1000 --ondisk=$rsd
part /boot --size=1000 --ondisk=$rsd
part swap --size=20000 --ondisk=$rsd
part /VM-VOL-KOLLA --size=60000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-CONTROL --size=140000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-NETWORK --size=120000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MONITORING --size=200000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MISC --size=230000 --fstype=ext4 --ondisk=$rsd

part /VM-VOL-SWIFT --size=$storage_size --fstype=ext4 --ondisk=$hsd

part /VM-VOL-CINDER --size=1024 --grow --fstype=ext4 --ondisk=$rsd
part /VM-VOL-COMPUTE --size=1024 --grow --fstype=ext4 --ondisk=$hsd
EOF

else

storage_size=$((d1_size * 20/100))
cinder_size=$((d1_size * 20/100))

cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$d1
part / --size=100000 --ondisk=$d1
part /home --size=1000 --ondisk=$d1
part /boot --size=1000 --ondisk=$d1
part swap --size=20000 --ondisk=$d1

part /VM-VOL-KOLLA --size=60000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-CONTROL --size=140000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-NETWORK --size=120000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-MONITORING --size=200000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-MISC --size=230000 --fstype=ext4 --ondisk=$d1

part /VM-VOL-SWIFT --size=$storage_size --fstype=ext4 --ondisk=$d1

part /VM-VOL-CINDER --size=$cinder_size --fstype=ext4 --ondisk=$d1
part /VM-VOL-COMPUTE --size=1024 --grow --fstype=ext4 --ondisk=$d1
EOF

fi
%end

clearpart --all --initlabel
zerombr
%include /tmp/partinfo

%packages
-biosdevname
%include /mnt/install/repo/ks_configs/packages.cfg
%end

%addon com_redhat_kdump --disable

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot
set -x -v
exec 1>/mnt/sysimage/root/firstboot.log 2>&1
cp /mnt/install/repo/embedded/* /mnt/sysroot/tmp
%include /mnt/install/repo/ks_configs/create-local-repo.cfg
%include /mnt/install/repo/ks_configs/configure-local-repo.cfg
%end

%post
exec 1>/root/init-install.log 2>&1

source /tmp/vm_functions.sh
source /tmp/project_config.sh

install_packages_hypervisor

echo $(generate_specific_pwd 31) |  passwd --stdin  root

##### check that system meets minimum requirements
export INSTALLED_RAM=`dmidecode -t memory | grep  Size: | grep -v "No Module Installed" | awk '{sum+=$2}END{print sum}'`
export RESERVED_RAM=$(( $INSTALLED_RAM*$RAM_PCT_AVAIL_CLOUD/100 ))

TOTAL_CONTROL_RAM=$((CONTROL_COUNT * CONTROL_RAM))
TOTAL_NETWORK_RAM=$((NETWORK_COUNT * NETWORK_RAM))
TOTAL_MONITORING_RAM=$((MONITORING_COUNT * MONITORING_RAM))
TOTAL_STORAGE_RAM=$((STORAGE_COUNT * STORAGE_RAM))

MIN_REQUIRED_RAM=$(($PFSENSE_RAM + $CLOUDSUPPORT_RAM + $IDENTITY_RAM + $TOTAL_CONTROL_RAM + $TOTAL_NETWORK_RAM + $TOTAL_MONITORING_RAM + $TOTAL_STORAGE_RAM + $KOLLA_RAM))


if [[ $MIN_REQUIRED_RAM -gt $RESERVED_RAM ]]; then
  MIN_PHYSICAL_RAM=$(($MIN_REQUIRED_RAM / $RAM_PCT_AVAIL_CLOUD/100))
  echo "Not enough memory installed!  Minimum required ram is $MIN_PHYSICAL_RAM"
  if [[ $HYPERVISOR_DEBUG == 0 ]]; then
    exit -1
  fi
fi

echo "Installed RAM=$INSTALLED_RAM"
echo "Reserved RAM=$RESERVED_RAM"
#############

export DRIVE_NAME=openstack

runuser -l root -c  'rm -rf /etc/default/grub'
runuser -l root -c  'touch /etc/default/grub'
runuser -l root -c  'chmod +x /etc/default/grub'

cat > /tmp/grub <<EOF
GRUB_DISABLE_OS_PROBER=true
GRUB_TIMEOUT=1
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="resume=/dev/mapper/cs_$DRIVE_NAME/swap rd.lvm.lv=cs_$DRIVE_NAME/root rd.lvm.lv=cs_$DRIVE_NAME/swap intel_iommu=on iommu=on default_hugepagesz=1G hugepagesz=1G hugepages=$RESERVED_RAM rhgb splash quiet"
GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true
EOF

runuser -l root -c  'cat /tmp/grub > /etc/default/grub'
runuser -l root -c  'grub2-mkconfig  -o /boot/grub2/grub.cfg'

rm -rf /tmp/grub

systemctl status tcsd
systemctl enable tcsd

systemctl stop kdump && systemctl disable kdump

## setup cert directory
## setup public key as other systems use it for cross system passwordless ssh
mkdir /root/.ssh
rm -rf /root/.ssh/id_rsa*
CERT_DIR="/root/.ssh"
create_ca_cert $CERT_DIR
create_server_cert $CERT_DIR "wildcard" "*"
chmod 600 /root/.ssh/*
runuser -l root -c 'cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys'
# ssh-keygen -t rsa -b 4096 -C "openstack-setup" -N "" -f /tmp/pf_key <<<y 2>&1 >/dev/null
# chmod 600 /tmp/pf_key*
# runuser -l root -c 'cat /tmp/pf_key.pub >> /root/.ssh/authorized_keys'
#############

replace_values_in_root_isos

hypervisor_debug

enable_kvm_module

dnf install cockpit-machines -y

#Prep initial startup script
cp /tmp/openstack.sh /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
###############################
###Close out cfg file
%end
eula --agreed
reboot --eject
#########
