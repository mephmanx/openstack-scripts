#version=RHEL8

# Partition clearing information
clearpart --all --initlabel
# Use graphical install
graphical
# Use HD installation media
#cdrom
harddrive --partition=/dev/disk/by-label/CentOS-8-x86_64 --dir=/
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Root password
rootpw none
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd" --enabled="tcsd"
# System bootloader configuration
bootloader --location=mbr
# Partition clearing information
timezone UTC --isUtc

%pre --log=/tmp/network.log
ip --brief address show | awk -F' ' '{ print $1 }' > /tmp/hw.out
# shellcheck disable=SC2006
nic_cards=`cat /tmp/hw.out`
nics=()
IFS=$'\n'; for i in $nic_cards; do
if [[ "lo" != "$i" ]]; then
STATUS=$(ethtool "$i" | grep 'Link detected' | awk -F: '{print $2}')

if [[ $STATUS =~ "yes" ]]; then
nics+=("$i")
fi
fi
done

HOWLONG=5 ## the number of characters
HOSTNAME_SUFFIX=$(< /dev/urandom 2>/dev/null tr -dc A-Za-z0-9 | head -c100 | head -c$((20+(RANDOM%20))) | tail -c$((20+(RANDOM%20))) | head -c${HOWLONG});
export ORGANIZATION="acton-lane"
echo "$HOSTNAME_SUFFIX" > /tmp/system_suffix
echo "$ORGANIZATION" > /tmp/organization
data_string="${nics[*]}"
cat << EOF >> /tmp/nicinfo
network --device=ext-con --activate --name=ext-con --noipv6 --bootproto=dhcp --onboot=yes --bondslaves="${data_string//${IFS:0:1}/,}" --bondopts="mode=802.3ad,miimon=100,lacp_rate=fast,xmit_hash_policy=layer2+3" --hostname=$ORGANIZATION-platform-$HOSTNAME_SUFFIX
EOF
%end

%include /tmp/nicinfo

%pre --log=/tmp/ks_pre.log
# shellcheck disable=SC2006
USB=`ls -l /dev/disk/by-id/ | grep usb | grep -v part | awk '{ print $NF }' | sed -r 's/..\/..\///g'`
if [ -z "$USB" ]; then
  USB=" "
fi
# Determine how many drives we have
# shellcheck disable=SC2046
set $(list-harddrives | sed "/^$USB/d")
let numd=$#/2
d1=$1
d1_size=$(printf "%.0f\n" "$2")
d2=$3
d2_size=$(printf "%.0f\n" "$4")

if [ "$numd" -ge 2 ] ; then
speed_d1=$(hdparm -tv /dev/"$d1" | awk '/Timing buffered disk reads/ {print $11}')
speed_d2=$(hdparm -tv /dev/"$d2" | awk '/Timing buffered disk reads/ {print $11}')
if [ "$speed_d1" -gt "$speed_d2" ]; then
hsd=$d1
hsd_drive_size_gb=$d1_size
rsd=$d2
else
hsd=$d2
hsd_drive_size_gb=$d2_size
rsd=$d1
fi

storage_size=$((hsd_drive_size_gb * 40/100))

## min drive size for 2 drive system is 800GB for regular speed drive (rsd).  high speed drive has no minimum.
## single drive is 1TB
## also test for min ram of 200GB.

cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$rsd
part / --size=100000 --ondisk=$rsd
part /home --size=1000 --ondisk=$rsd
part /boot --size=1000 --ondisk=$rsd
part swap --size=20000 --ondisk=$rsd
part /VM-VOL-KOLLA --size=60000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-CONTROL --size=140000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-NETWORK --size=120000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MONITORING --size=200000 --fstype=ext4 --ondisk=$rsd
part /VM-VOL-MISC --size=230000 --fstype=ext4 --ondisk=$rsd

part /VM-VOL-SWIFT --size=$storage_size --fstype=ext4 --ondisk=$hsd

part /VM-VOL-CINDER --size=1024 --grow --fstype=ext4 --ondisk=$rsd
part /VM-VOL-COMPUTE --size=1024 --grow --fstype=ext4 --ondisk=$hsd
EOF

else

storage_size=$((d1_size * 20/100))
cinder_size=$((d1_size * 20/100))

cat << EOF >> /tmp/partinfo
part biosboot --size=1 --ondisk=$d1
part / --size=100000 --ondisk=$d1
part /home --size=1000 --ondisk=$d1
part /boot --size=1000 --ondisk=$d1
part swap --size=20000 --ondisk=$d1

part /VM-VOL-KOLLA --size=60000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-CONTROL --size=140000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-NETWORK --size=120000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-MONITORING --size=200000 --fstype=ext4 --ondisk=$d1
part /VM-VOL-MISC --size=230000 --fstype=ext4 --ondisk=$d1

part /VM-VOL-SWIFT --size=$storage_size --fstype=ext4 --ondisk=$d1

part /VM-VOL-CINDER --size=$cinder_size --fstype=ext4 --ondisk=$d1
part /VM-VOL-COMPUTE --size=1024 --grow --fstype=ext4 --ondisk=$d1
EOF

fi
%end

zerombr
%include /tmp/partinfo

%packages
%include /mnt/install/repo/ks_configs/packages.cfg
%end

%addon com_redhat_kdump --disable

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --nochroot
exec 1>/mnt/sysimage/root/firstboot.log 2>&1
cp /mnt/install/repo/embedded/* /mnt/sysroot/tmp
cp /tmp/system_suffix /mnt/sysroot/tmp
cp /tmp/organization /mnt/sysroot/tmp
%include /mnt/install/repo/ks_configs/create-local-repo.cfg
%include /mnt/install/repo/ks_configs/configure-local-repo.cfg
%end

%post
exec 1>/root/init-install.log 2>&1

source /tmp/vm_functions.sh
source /tmp/project_config.sh

ORGANIZATION=$(cat /tmp/organization)
sed -i "s/{ORGANIZATION}/$ORGANIZATION/g" /tmp/project_config.sh

install_packages_hypervisor

generate_pwd 31 |  passwd --stdin  root

is_intel=$(cat </proc/cpuinfo | grep vendor | uniq | grep -c 'Intel')
arch="intel"
if [[ $is_intel -lt 0 ]]; then
arch="amd"
fi

INSTALLED_RAM=$(dmidecode -t memory | grep  Size: | grep -v "No Module Installed" | awk '{sum+=$2}END{print sum}')
RESERVED_RAM=$(( INSTALLED_RAM*RAM_PCT_AVAIL_CLOUD/100 ))

grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) ${arch}_iommu=on"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) iommu=on"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) default_hugepagesz=1G"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) hugepagesz=1G"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) hugepages=$RESERVED_RAM"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) rhgb"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) splash"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) quiet"
grub2-editenv - set "$(grub2-editenv - list | grep kernelopts) systemd.log_level=0"
grub2-editenv - set menu_auto_hide=1

### system profile
tuned-adm profile virtual-host
#############

replace_values_in_root_isos

enable_kvm_module
#Prep initial startup script
mv /tmp/init-openstack.sh /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
###############################
###Close out cfg file
%end
eula --agreed
reboot --eject
#########
